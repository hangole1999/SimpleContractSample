"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const demux_1 = require("demux");
const mongodb_1 = require("mongodb");
const MongoBlock_1 = require("./MongoBlock");
/**
 * Implementation of an ActionReader that reads blocks from a mongodb instance.
 */
class MongoActionReader extends demux_1.AbstractActionReader {
    constructor(mongoEndpoint = "mongodb://127.0.0.1:27017", startAtBlock = 1, onlyIrreversible = false, maxHistoryLength = 600, dbName = "EOS") {
        super(startAtBlock, onlyIrreversible, maxHistoryLength);
        this.mongoEndpoint = mongoEndpoint;
        this.startAtBlock = startAtBlock;
        this.onlyIrreversible = onlyIrreversible;
        this.maxHistoryLength = maxHistoryLength;
        this.dbName = dbName;
        this.mongodb = null;
    }
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            const mongoInstance = yield mongodb_1.MongoClient.connect(this.mongoEndpoint, { useNewUrlParser: true });
            this.mongodb = yield mongoInstance.db(this.dbName);
        });
    }
    getHeadBlockNumber() {
        return __awaiter(this, void 0, void 0, function* () {
            this.throwIfNotInitialized();
            const [blockInfo] = yield this.mongodb.collection("block_states")
                .find({})
                .limit(1)
                .sort({ $natural: -1 })
                .toArray();
            if (this.onlyIrreversible) {
                return blockInfo.block_header_state.dpos_irreversible_blocknum;
            }
            return blockInfo.block_header_state.block_num;
        });
    }
    getBlock(blockNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            this.throwIfNotInitialized();
            // Will not handle scenario of a fork since it only grabs first block
            const [rawBlock] = yield this.mongodb.collection("blocks")
                .find({ block_num: blockNumber })
                .toArray();
            const block = new MongoBlock_1.MongoBlock(rawBlock);
            return block;
        });
    }
    throwIfNotInitialized() {
        if (!this.mongodb) {
            throw Error("MongoActionReader must be initialized before fetching blocks.");
        }
    }
}
exports.MongoActionReader = MongoActionReader;
